currentEpoch, configEpoch的区别
------------------------------------

currentEpoch:

一般用于server.cluster->currentEpoch，cluster级别全局变量，可以理解为全局变更的逻辑时钟。
当failover时，或slots被迁移到本节点时，这些变更动作都会触发currentEpoch自增。每个节点在
消息传递中如果发现有更大的值，会更新自己的server.cluster->currentEpoch，所以它的取值在
各个节点最终都是一样的。

节点需要维护自己的cluster视图，如果在分布式系统中，保障各个节点看到一致的视图，这是一个难点


configEpoch:

经常用法 myself->configEpoch, slots[j]->configEpoch。

经实验观察，每个master的configEpoch都不一样，确实和注释中的描述一致，但是颇为费解。
但是如果把configEpoch理解为节点相关的配置版本号，表示该节点配置是在哪一个逻辑时刻被更改的，就说的通了。
一个节点的配置通常不会在同一个逻辑时刻被更改。而所谓的逻辑时刻变更只是failover, migrate，这两种操作
不太可能有两个节点同时发生。

集群中的单个节点配置通常都是一个一个变更的，发生在不同的逻辑时刻，所以configEpoch自然就不一样了。

configEpoch的作用是什么呢？用于确定slots的owner。当节点加入或启动时，如果多个节点声称拥有同一slots，
就会根据configEpoch来仲裁。问题来了，如果不用configEpoch能实现同样的目的吗?


Redis cluster tutorial 根据教程中的例子，实际操作一下，有助于理解
